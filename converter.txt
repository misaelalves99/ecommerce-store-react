(Converta esse código C# Asp.NET e css para React 19+ com TypeScript)
(Converta o CSS em CSS modules)
(Sempre coloque o caminho do arquivo no topo do código comentado)

using ECommerceStore.Models;
using Microsoft.EntityFrameworkCore;

namespace ECommerceStore.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        { }

        // DbSets (representam as tabelas no banco de dados)
        public DbSet<Product> Products { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Brand> Brands { get; set; }
        public DbSet<Image> Images { get; set; }
    }
}

using ECommerceStore.Data;
using ECommerceStore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Linq;

public static class SeedData
{
    public static void Initialize(IServiceProvider serviceProvider)
    {
        // Comentado para evitar erro de banco inexistente
        /*
        var options = serviceProvider.GetRequiredService<DbContextOptions<AppDbContext>>();

        using var context = new AppDbContext(options);

        if (context.Categories.Any())
        {
            return; // DB já populado
        }

        var electronics = new Category { Name = "Eletrônicos", Description = "Produtos eletrônicos variados" };
        var fashion = new Category { Name = "Moda", Description = "Roupas e acessórios" };
        context.Categories.AddRange(electronics, fashion);

        var brandApple = new Brand { Name = "Apple" };
        var brandNike = new Brand { Name = "Nike" };
        context.Brands.AddRange(brandApple, brandNike);

        context.SaveChanges();

        var product1 = new Product
        {
            Name = "iPhone 14",
            Description = "Smartphone Apple iPhone 14",
            SKU = "IP14-001",
            Price = 6999.99m,
            Stock = 50,
            CategoryId = electronics.Id,
            BrandId = brandApple.Id,
            IsActive = true
        };

        var product2 = new Product
        {
            Name = "Tênis Nike Air",
            Description = "Tênis esportivo Nike Air",
            SKU = "NIKEAIR-001",
            Price = 499.90m,
            Stock = 100,
            CategoryId = fashion.Id,
            BrandId = brandNike.Id,
            IsActive = true
        };

        context.Products.AddRange(product1, product2);
        context.SaveChanges();
        */
    }
}

using ECommerceStore.Data;
using ECommerceStore.Services;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// Configura  o do banco de dados MySQL (ajuste para o banco real, em vez de usar InMemoryDatabase)
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseMySql(builder.Configuration.GetConnectionString("DefaultConnection"),
    ServerVersion.AutoDetect(builder.Configuration.GetConnectionString("DefaultConnection"))));

// Registro dos servi os MVC (Controllers + Views)
builder.Services.AddControllersWithViews();

// Registro de sess o (autentica  o e carrinho, por exemplo)
builder.Services.AddDistributedMemoryCache();
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromHours(1);  // Tempo de expira  o da sess o
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
});

// Inje  o de depend ncia dos servi os personalizados
builder.Services.AddScoped<CategoryService>();
builder.Services.AddScoped<ProductService>();
builder.Services.AddScoped<BrandService>();

builder.Services.AddHttpContextAccessor();

var app = builder.Build();

// Pipeline de requisi  o HTTP
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();  // P gina de erro para desenvolvimento
}
else
{
    app.UseExceptionHandler("/Home/Error");  // P gina de erro para produ  o
    app.UseHsts();  // Habilita HTTP Strict Transport Security (HSTS)
}

app.UseHttpsRedirection();      // Redireciona HTTP para HTTPS
app.UseStaticFiles();           // Permite servir arquivos est ticos (CSS, JS, imagens)

app.UseRouting();               // Habilita o roteamento
app.UseSession();               // Habilita a sess o para armazenar dados tempor rios
app.UseAuthorization();         // Habilita a autoriza  o

// Rota padr o da aplica  o
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();

using ECommerceStore.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;

namespace ECommerceStore
{
    public class Startup
    {
        public IConfiguration Configuration { get; }

        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public void ConfigureServices(IServiceCollection services)
        {
            // NÃO registrar DbContext para evitar uso do banco
            // services.AddDbContext<AppDbContext>(...);

            services.AddControllersWithViews();

            // Registrar serviços mockados (sem acesso ao banco)
            services.AddScoped<CategoryService>(); // implementar mockado
            services.AddScoped<ProductService>();  // implementar mockado
            services.AddScoped<BrandService>();    // implementar mockado
            // Outros serviços podem ser comentados se dependem do banco
            // services.AddScoped<CartService>();
            // services.AddScoped<CheckoutService>();
            // services.AddScoped<OrderService>();
            // services.AddScoped<PaymentService>();
            // services.AddScoped<WishlistService>();

            services.AddDistributedMemoryCache();
            services.AddSession(options =>
            {
                options.IdleTimeout = TimeSpan.FromHours(1);
                options.Cookie.HttpOnly = true;
                options.Cookie.IsEssential = true;
            });
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();

                // SEM migrations e seed, pois não há banco
                /*
                using (var scope = app.ApplicationServices.CreateScope())
                {
                    var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();
                    dbContext.Database.Migrate();
                    SeedData.Initialize(scope.ServiceProvider);
                }
                */
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseSession();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}



